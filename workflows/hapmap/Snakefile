from os.path import join

configfile: "workflows/pedsim/config.yaml"

REF_DIR         = config["reference"]["ref_dir"]
GRCh37_fasta    = join(REF_DIR, config["reference"]["GRCh37_fasta"])
GENETIC_MAP     = join(REF_DIR, config["reference"]["GENETIC_MAP"])
vcfRef          = join(REF_DIR, config["reference"]["vcfRef"])
refHaps         = join(REF_DIR, config["reference"]["refHaps"])
lift_chain      = join(REF_DIR, config["reference"]["lift_chain"])
cmmap           = join(REF_DIR, config["reference"]["cmmap"])
SITE_1000GENOME = join(REF_DIR, config["reference"]["SITE_1000GENOME"])
hapmap_ped      = join(REF_DIR, config["reference"]["hapmap_ped"])
hapmap_mp       = join(REF_DIR, config["reference"]["hapmap_mp"])
hapmap_fam      = join(REF_DIR, config["reference"]["hapmap_fam"])
hd_genotype_chip= join(REF_DIR, config["reference"]["hd_genotype_chip"])
pedsim_map      = join(REF_DIR, config["reference"]["pedsim_map"])

CHROMOSOMES     = [str(i) for i in range(1, 23)]

CHIP_DATA_LINK = 'ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/supporting/hd_genotype_chip/ALL.chip.omni_broad_sanger_combined.20140818.snps.genotypes.vcf.gz'
CHIP_INDEX_LINK = 'ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/supporting/hd_genotype_chip/ALL.chip.omni_broad_sanger_combined.20140818.snps.genotypes.vcf.gz.tbi'

rule all:
    input:
        "results/relatives.tsv",
        "results/accuracy.png"


rule recode_vcf:
    input:
        ped=hapmap_ped,
        mp=hapmap_mp
    output:
        vcf='vcf/merged_recoded.vcf.gz'
    params:
        out='vcf/merged_recoded'
    conda: "../../envs/plink.yaml"
    shell: "plink --ped {input.ped} --map {input.mp} --snps-only just-acgt --output-chr M --not-chr XY,MT --export vcf bgz --out {params.out}"


rule postprocess:
    input:
        vcf=rules.recode_vcf.output['vcf'],
        fam=hapmap_fam
    output:
        kin='kinship/reheaded_data.kinship',
        vcf='vcf/merged_sorted.vcf.gz',
        fam='kinship/reheaded_data.fam'
    conda:
        "envs/hapmap.yaml"
    script:
        "scripts/hapmap.py"

rule liftover:
    input:
        vcf=rules.postprocess.output['vcf'],
        chain=lift_chain,
        ref=GRCh37_fasta
    output:
        vcf="vcf/merged_mapped_sorted.vcf.gz"

    #conda: "envs/crossmap.yaml"
    singularity: "docker://alexgenx/picard:latest"
    shell:
        """
            java -Xmx16G -jar /picard/picard.jar LiftoverVcf MAX_RECORDS_IN_RAM=100000 I={input.vcf} O={output.vcf} CHAIN={input.chain} REJECT=vcf/rejected.vcf R={input.ref}
        """

include: "../../rules/imputation.smk"

include: "../../rules/relatives.smk"

rule evaluate_accuracy:
    input:
        rel=rules.merge_king_ersa.output[0],
        fam=rules.postprocess.output['fam']
    output:
        'results/accuracy.png'
    script:
        '../../scripts/evaluate.py'


