

SAMPLES = [str(s) for s in range(10)]
CHROMOSOMES     = [str(i) for i in range(1, 23)]

CHIP_DATA_LINK = 'ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/supporting/hd_genotype_chip/ALL.chip.omni_broad_sanger_combined.20140818.snps.genotypes.vcf.gz'
CHIP_INDEX_LINK = 'ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/supporting/hd_genotype_chip/ALL.chip.omni_broad_sanger_combined.20140818.snps.genotypes.vcf.gz.tbi'

rule all:
    input:
        #expand("simulated/{sample}.txt", sample=SAMPLES)
        "pedsim/phased/merged.vcf.gz"


rule download_source:
    output:
        bg="genomes_raw/all.vcf.gz",
        tbi="genomes_raw/all.vcf.gz.tbi"

    shell:
         """
             wget {CHIP_DATA_LINK} -O {output.bg} -nv
             wget {CHIP_INDEX_LINK} -O {output.tbi} -nv 
         """

rule intersect:
    input: rules.download_source.output['bg']
    output: "pedsim/phased/chr{chrom}.phased.vcf.gz"

    shell:
        """
            bcftools isec -n=2 -w1 -r {wildcards.chrom} -O v -o {output} /media/1000genome/bcf/1000genome_chr{wildcards.chrom}.bcf {input}  
        """


rule merge_background:
    input:
        expand("pedsim/phased/chr{chrom}.phased.vcf.gz", chrom=CHROMOSOMES)
    output:
        rules.all.input
    params:
        list="pedsim/phased/phased.merge.list"
    conda:
        "../../envs/bcftools.yaml"
    shell:
        """
        # for now just skip empty files
        true > {params.list} && \
        for i in {input}; do
            if [ -s $i ]
            then
                echo $i >> {params.list}
            else
                continue
            fi
        done
        bcftools concat -f {params.list} -O z -o {output}
        """

rule simulate:
    # os.system("{} -d {} -m {} -i {} -o  {} --intf {}".format(
#             ped_sim, def_file, map_file, phased_input, outname, intf_file
#         ))

    input:
        bg=rules.merge_background.output,
        _map='workflows/pedsim/params/refined_mf.simmap',
        _def='workflows/pedsim/params/Relatives.def',
        intf='workflows/pedsim/params/nu_p_campbell.tsv'
    output:
        vcf='pedsim/simulated/data.vcf.gz',
        fam='pedsim/simulated/data.fam'
    params:
        prefix='pedsim/simulated/data'
    shell:
        """
            pedsim -d {input._def} -m {input._map} -i {input.bg} -o {params.prefix} --intf {input.intf}
        """