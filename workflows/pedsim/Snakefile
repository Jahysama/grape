#configfile: "workflows/pedsim/config.yaml"

SAMPLES = [str(s) for s in range(10)]
CHROMOSOMES     = [str(i) for i in range(1, 23)]

CHIP_DATA_LINK = 'ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/supporting/hd_genotype_chip/ALL.chip.omni_broad_sanger_combined.20140818.snps.genotypes.vcf.gz'
CHIP_INDEX_LINK = 'ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/supporting/hd_genotype_chip/ALL.chip.omni_broad_sanger_combined.20140818.snps.genotypes.vcf.gz.tbi'

rule all:
    input:
        "results/relatives.tsv",
        "results/accuracy.png"


rule download_source:
    output:
        bg="genomes_raw/all.vcf.gz",
        tbi="genomes_raw/all.vcf.gz.tbi"

    shell:
         """
             wget {CHIP_DATA_LINK} -O {output.bg} -nv
             wget {CHIP_INDEX_LINK} -O {output.tbi} -nv 
         """

rule intersect:
    input: rules.download_source.output['bg']
    output: "pedsim/phased/chr{chrom}.phased.vcf.gz"

    shell:
        """
            bcftools isec -n=2 -w1 -r {wildcards.chrom} -O v -o {output} /media/1000genome/bcf/1000genome_chr{wildcards.chrom}.bcf {input}  
        """


rule merge_background:
    input:
        data=expand("pedsim/phased/chr{chrom}.phased.vcf.gz", chrom=CHROMOSOMES),
        eu="eu.tsv"
    output:
        "pedsim/phased/background.vcf.gz"
    params:
        list="pedsim/phased/phased.merge.list"
    conda:
        "../../envs/bcftools.yaml"
    shell:
        """
            # for now just skip empty files
            true > {params.list} && \
            for i in {input.data}; do
                if [ -s $i ]
                then
                    echo $i >> {params.list}
                else
                    continue
                fi
            done
            bcftools concat -f {params.list} | bcftools view --force-samples --samples-file {input.eu} -O z -o {output}
        """

rule prepare_map:
    output:
        "pedsim/params/refined_mf.simmap"
    shell:
        """
            wget https://github.com/cbherer/Bherer_etal_SexualDimorphismRecombination/raw/master/Refined_genetic_map_b37.tar.gz
            tar xvzf Refined_genetic_map_b37.tar.gz
            printf "#chr\tpos\tmale_cM\tfemale_cM\n" > {output}
            for chr in {{1..22}}; do
              paste Refined_genetic_map_b37/male_chr$chr.txt Refined_genetic_map_b37/female_chr$chr.txt \
                | awk -v OFS="\t" 'NR > 1 && $2 == $6 {{print $1,$2,$4,$8}}' \
                | sed 's/^chr//' >> {output};
            done
            rm -rf Refined_genetic_map_b37
        """

rule simulate:
    input:
        bg=rules.merge_background.output,
        _map=rules.prepare_map.output,
        _def='pedsim/params/Relatives.def',
        intf='pedsim/params/nu_p_campbell.tsv'
    output:
        vcf='pedsim/simulated/data.vcf.gz',
        seg='pedsim/simulated/data.seg',
        fam='pedsim/simulated/data-everyone.fam'
    params:
        prefix='pedsim/simulated/data'
    singularity:
        "docker://alexgenx/pedsim:stable"
    shell:
        """
            pedsim -d {input._def} -m {input._map} -i {input.bg} -o {params.prefix} --intf {input.intf} --fam
        """


rule postprocess:
    input:
        vcf='pedsim/simulated/data.vcf.gz',
        fam='pedsim/simulated/data-everyone.fam'
    output:
        kin='pedsim/simulated/reheaded_data.kinship',
        vcf='vcf/merged_mapped_sorted.vcf.gz',
        fam='pedsim/simulated/reheaded_data.fam'
    conda:
        "../../envs/postprocess.yaml"
    script:
        "../../scripts/postprocess.py"

rule index:
    input:
        vcf=rules.postprocess.output['vcf'],
    output:
        idx='vcf/merged_mapped_sorted.vcf.gz.csi'
    conda:
        '../../envs/bcftools.yaml'
    shell:
        "bcftools index {input}"

include: "../../rules/imputation.smk"

include: "../../rules/relatives.smk"

rule evaluate_accuracy:
    input:
        rel=rules.merge_king_ersa.output[0],
        fam=rules.postprocess.output['fam']
    output:
        'results/accuracy.png'
    script:
         '../../scripts/evaluate.py'