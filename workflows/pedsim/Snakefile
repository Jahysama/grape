from os.path import join

configfile: "config.yaml"

use_rapid       = config["use_rapid"]
use_ibis        = config["use_ibis"]
is_client       = False
use_simulated_ibd = config["use_simulated_ibd"] if "use_simulated_ibd" in config else False
REF_DIR         = config["reference"]["ref_dir"]
GRCh37_fasta    = join(REF_DIR, config["reference"]["GRCh37_fasta"])
GENETIC_MAP     = join(REF_DIR, config["reference"]["GENETIC_MAP"])
genetic_map_GRCh37=join(REF_DIR, config["reference"]["genetic_map_GRCh37"])
vcfRef          = join(REF_DIR, config["reference"]["vcfRef"])
refHaps         = join(REF_DIR, config["reference"]["refHaps"])
lift_chain      = join(REF_DIR, config["reference"]["lift_chain"])
cmmap           = join(REF_DIR, config["reference"]["cmmap"])
SITE_1000GENOME = join(REF_DIR, config["reference"]["SITE_1000GENOME"])
hapmap_ped      = join(REF_DIR, config["reference"]["hapmap_ped"])
hapmap_mp       = join(REF_DIR, config["reference"]["hapmap_mp"])
hapmap_fam      = join(REF_DIR, config["reference"]["hapmap_fam"])
hd_genotype_chip= join(REF_DIR, config["reference"]["hd_genotype_chip"])
pedsim_map      = join(REF_DIR, config["reference"]["pedsim_map"])

SAMPLES = [str(s) for s in range(10)]
CHROMOSOMES     = [str(i) for i in range(1, 23)]

PLINK_FORMATS   = ['bed', 'bim', 'fam']

#CHIP_DATA_LINK = 'ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/supporting/hd_genotype_chip/ALL.chip.omni_broad_sanger_combined.20140818.snps.genotypes.vcf.gz'
#CHIP_INDEX_LINK = 'ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/supporting/hd_genotype_chip/ALL.chip.omni_broad_sanger_combined.20140818.snps.genotypes.vcf.gz.tbi'

rule all:
    input:
        "results/relatives.tsv",
        "results/accuracy.png",
        "results/overlaps.tsv"


rule intersect:
    input:
        hd_genotype_chip=hd_genotype_chip,
        vcfRef=vcfRef
    output: "pedsim/phased/chr{chrom}.phased.vcf.gz"
    conda: "../../envs/bcftools.yaml"
    shell:
        """
            bcftools isec -n=2 -w1 -r {wildcards.chrom} -O z -o {output} {input.vcfRef} {input.hd_genotype_chip}  
        """


rule merge_background:
    input:
        data=expand("pedsim/phased/chr{chrom}.phased.vcf.gz", chrom=CHROMOSOMES),
        eu=config['sim_samples_file']
    output:
        "pedsim/phased/background.vcf.gz"
    params:
        list="pedsim/phased/phased.merge.list"
    conda:
        "../../envs/bcftools.yaml"
    shell:
        """
            # for now just skip empty files
            true > {params.list} && \
            for i in {input.data}; do
                if [ -s $i ]
                then
                    echo $i >> {params.list}
                else
                    continue
                fi
            done
            bcftools concat -f {params.list} | bcftools view --force-samples --samples-file {input.eu} -O z -o {output}
        """

'''
rule prepare_map:
    output:
        "params/refined_mf.simmap"
    shell:
        """
            wget https://github.com/cbherer/Bherer_etal_SexualDimorphismRecombination/raw/master/Refined_genetic_map_b37.tar.gz
            tar xvzf Refined_genetic_map_b37.tar.gz
            printf "#chr\tpos\tmale_cM\tfemale_cM\n" > {output}
            for chr in {{1..22}}; do
              paste Refined_genetic_map_b37/male_chr$chr.txt Refined_genetic_map_b37/female_chr$chr.txt \
                | awk -v OFS="\t" 'NR > 1 && $2 == $6 {{print $1,$2,$4,$8}}' \
                | sed 's/^chr//' >> {output};
            done
            rm -rf Refined_genetic_map_b37
        """
'''

rule simulate:
    input:
        bg=rules.merge_background.output,
        _map=pedsim_map,
        _def=config['sim_params_file'],
        intf='params/nu_p_campbell.tsv'
    output:
        vcf='pedsim/simulated/data.vcf.gz',
        seg='pedsim/simulated/data.seg',
        fam='pedsim/simulated/data-everyone.fam'
    params:
        prefix='pedsim/simulated/data'
    singularity:
        "docker://alexgenx/pedsim:stable"
    shell:
        """
            pedsim -d {input._def} -m {input._map} -i {input.bg} -o {params.prefix} --intf {input.intf} --fam
        """


rule postprocess:
    input:
        vcf='pedsim/simulated/data.vcf.gz',
        fam='pedsim/simulated/data-everyone.fam'
    output:
        kin='pedsim/simulated/reheaded_data.kinship',
        vcf='vcf/merged_mapped_sorted.vcf.gz',
        fam='pedsim/simulated/reheaded_data.fam'
    conda:
        "../../envs/postprocess.yaml"
    script:
        "../../scripts/postprocess.py"

rule prepare_vcf:
    input:
        vcf=rules.postprocess.output['vcf']
    output:
        idx='vcf/merged_mapped_sorted.vcf.gz.csi'
    params:
        vcf='vcf/merged_mapped_sorted.vcf.gz'
    conda:
        '../../envs/bcftools.yaml'
    shell:
        "bcftools index {input}"

if use_ibis:
    include: "../../rules/relatives_ibis.smk"
else:
    include: "../../rules/imputation.smk"
    include: "../../rules/relatives.smk"

rule evaluate_accuracy:
    input:
        rel=rules.merge_king_ersa.output[0],
        fam=rules.postprocess.output['fam']
    output:
        accuracy='results/accuracy.png',
        pr='results/precision_recall.png'
    conda:
        "../../envs/evaluation.yaml"
    script:
         '../../scripts/evaluate.py'

rule evaluate_ibd:
    input:
        pedsim=rules.simulate.output['seg'],
        ibd="ibd/merged_ibd.tsv"
    params:
        cm_dir='cm',
        is_rapid_ibd=use_rapid
    conda:
        '../../envs/evaluation.yaml'
    output:
        overlap='results/overlaps.tsv',
        seg_accuracy='results/seg_accuracy.png',
        total_len_accuracy='results/total_len_accuracy.png'
    script:
        '../../scripts/evaluate_ibd.py'